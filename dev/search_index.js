var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/#Index","page":"API reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"api/#Docstrings","page":"API reference","title":"Docstrings","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [SimpleWeightedGraphs]","category":"page"},{"location":"api/#SimpleWeightedGraphs.AbstractSimpleWeightedGraph","page":"API reference","title":"SimpleWeightedGraphs.AbstractSimpleWeightedGraph","text":"AbstractSimpleWeightedGraph\n\nAn abstract type representing a simple graph structure. AbstractSimpleWeightedGraphs must have the following elements:\n\nweightmx::AbstractSparseMatrix{Real}\n\n\n\n\n\n","category":"type"},{"location":"api/#SimpleWeightedGraphs.SimpleWeightedDiGraph","page":"API reference","title":"SimpleWeightedGraphs.SimpleWeightedDiGraph","text":"SimpleWeightedDiGraph{T, U}\n\nA type representing a directed graph with weights of type U.\n\nNote that adding or removing vertices or edges is not particularly performant; see MetaGraphs.jl for possible alternatives.\n\nThe primary constructor takes a sparse adjacency matrix as input, of which the transpose is stored. To provide the transpose directly, the keyword argument permute=true can be used.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimpleWeightedGraphs.SimpleWeightedDiGraph-Union{Tuple{T}, Tuple{U}, Tuple{Graphs.AbstractGraph{T}, U}} where {U<:Real, T}","page":"API reference","title":"SimpleWeightedGraphs.SimpleWeightedDiGraph","text":"DiGraph(g::AbstractGraph, x::Real)\n\nConstruct a weighted digraph from other graph g with initial weight x.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimpleWeightedGraphs.SimpleWeightedGraph","page":"API reference","title":"SimpleWeightedGraphs.SimpleWeightedGraph","text":"SimpleWeightedGraph{T, U}\n\nA type representing an undirected graph with weights of type U.\n\nNote that adding or removing vertices or edges is not particularly performant; see MetaGraphs.jl for possible alternatives.\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.getindex-Tuple{SimpleWeightedDiGraph, Graphs.AbstractEdge, Val{:weight}}","page":"API reference","title":"Base.getindex","text":"g[e::SimpleWeightedGraph, Val{:weight}()]\n\nEquivalent to g[src(e), dst(e)].\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{SimpleWeightedDiGraph, Integer, Integer, Val{:weight}}","page":"API reference","title":"Base.getindex","text":"g[e::SimpleWeightedGraph, i::Integer, j::Integer, Val{:weight}()]\n\nReturn the weight of edge (i, j).\n\n\n\n\n\n","category":"method"},{"location":"api/#SimpleWeightedGraphs.loadswg_mult-Tuple{IO}","page":"API reference","title":"SimpleWeightedGraphs.loadswg_mult","text":"loadswg_mult(io)\n\nReturn a dictionary of (name=>graph) loaded from IO stream io.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimpleWeightedGraphs.saveswg-Tuple{IO, Graphs.AbstractGraph, String}","page":"API reference","title":"SimpleWeightedGraphs.saveswg","text":"saveswg(io, g, gname)\n\nWrite a graph g with name gname in a proprietary format to the IO stream designated by io. Return 1 (number of graphs written).\n\n\n\n\n\n","category":"method"},{"location":"api/#SimpleWeightedGraphs.saveswg_mult-Tuple{IO, Dict}","page":"API reference","title":"SimpleWeightedGraphs.saveswg_mult","text":"saveswg_mult(io, graphs)\n\nWrite a dictionary of (name=>graph) to an IO stream io, with default GZip compression. Return number of graphs written.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimpleWeightedGraphs","category":"page"},{"location":"#SimpleWeightedGraphs","page":"Home","title":"SimpleWeightedGraphs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SimpleWeightedGraphs.","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Graphs, SimpleWeightedGraphs\n\ng = SimpleWeightedGraph(3)  # or use `SimpleWeightedDiGraph` for directed graphs\nadd_edge!(g, 1, 2, 0.5)\nadd_edge!(g, 2, 3, 0.8)\nadd_edge!(g, 1, 3, 2.0)\n\n# get weight of edge from vertex 1 to vertex 2\nget_weight(g, 1, 2)\n\n# find the shortest path from vertex 1 to vertex 3 taking weights into account.\nenumerate_paths(dijkstra_shortest_paths(g, 1), 3)\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\n# reweight the edge from 1 to 2\nadd_edge!(g, 1, 2, 1.6)\n\n# rerun the shortest path calculation from 1 to 3\nenumerate_paths(dijkstra_shortest_paths(g, 1), 3)\n2-element Array{Int64,1}:\n 1\n 3\n\n# it's possible to build the graph from arrays of sources, destinations and weights\nsources = [1,2,1]\ndestinations = [2,3,3]\nweights = [0.5, 0.8, 2.0]\ng = SimpleWeightedGraph(sources, destinations, weights)\n\n# the combine keyword handles repeated pairs (sum by default)\ng = SimpleWeightedGraph([1,2,1], [2,1,2], [1,1,1]; combine = +)\ng.weights[2,1] == g.weights[1,2] == 3 # true\n\n# WARNING: unexpected results might occur with non-associative combine functions\n\n# notice that weights are indexed by [destination, source]\ns = SimpleWeightedDiGraph([1,2,1], [2,1,2], [1,1,1]; combine = +)\ns.weights[1,2] == 1 # true\ns.weights[2,1] == 2 # true","category":"page"},{"location":"#Caveats","page":"Home","title":"Caveats","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please pay attention to the fact that zero-weight edges are discarded by add_edge!. This is due to the way the graph is stored (a sparse matrix). A possible workaround is to set a very small weight instead.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that adding or removing vertices or edges from these graph types is not particularly performant. See MetaGraphsNext.jl or MetaGraphs.jl for possible alternatives.","category":"page"}]
}
